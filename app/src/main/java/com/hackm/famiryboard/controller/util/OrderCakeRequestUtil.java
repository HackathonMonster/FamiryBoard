package com.hackm.famiryboard.controller.util;import android.content.Context;import android.os.AsyncTask;import android.util.Log;import com.hackm.famiryboard.model.enumerate.NetworkTasks;import com.hackm.famiryboard.controller.provider.NetworkTaskCallback;import com.hackm.famiryboard.model.system.AppConfig;import org.apache.http.Header;import org.apache.http.HttpResponse;import org.apache.http.HttpStatus;import org.apache.http.NameValuePair;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.HttpClient;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.HttpPost;import org.apache.http.conn.scheme.PlainSocketFactory;import org.apache.http.conn.scheme.Scheme;import org.apache.http.conn.scheme.SchemeRegistry;import org.apache.http.conn.ssl.SSLSocketFactory;import org.apache.http.conn.ssl.X509HostnameVerifier;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.impl.conn.SingleClientConnManager;import org.apache.http.util.EntityUtils;import org.json.JSONException;import org.json.JSONObject;import java.io.IOException;import java.util.List;//ストアの一覧を取得public class OrderCakeRequestUtil {	private NetworkTaskCallback mCallback;    private Context mContext;    public OrderCakeRequestUtil(final NetworkTaskCallback callback) {        this.mCallback = callback;    }    public void onRequest(Context context, final String url, final NetworkTasks task, final List<NameValuePair> stringParts) {        mContext = context;        if (AppConfig.DEBUG) Log.d(this.getClass().getSimpleName(), url);        new AsyncTask<Void, Void, String>() {            @Override            protected String doInBackground(Void... params) {                String result = null;                SSLSocketFactory socketFactory = SSLSocketFactory.getSocketFactory();                socketFactory.setHostnameVerifier((X509HostnameVerifier) org.apache.http.conn.ssl.SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);                SchemeRegistry registry = new SchemeRegistry();                registry.register(new Scheme("http", new PlainSocketFactory(), 80));                registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));                HttpClient httpclient = new DefaultHttpClient();                SingleClientConnManager mgr = new SingleClientConnManager(httpclient.getParams(), registry);                httpclient = new DefaultHttpClient(mgr, httpclient.getParams());                HttpPost httppost = new HttpPost(UriUtil.orderCakeUri());                httppost.setHeader("Set-Cookie", mContext.getSharedPreferences(AppConfig.PREF_NAME, Context.MODE_PRIVATE).getString(AppConfig.PREF_SAVED_COOKIE, ""));                try {                    //Parameter set                    httppost.setEntity(new UrlEncodedFormEntity(stringParts));                    HttpResponse response = httpclient.execute(httppost);                    int statusCode = response.getStatusLine().getStatusCode();                    if (statusCode == HttpStatus.SC_OK) {                        result = EntityUtils.toString(response.getEntity());                        if (AppConfig.DEBUG) Log.d(this.getClass().getSimpleName(), "response:" + result);                        Header[] headers = response.getHeaders("Set-Cookie");                        for (Header header : headers) {                            if (header.getValue().contains("ECSESSID")) {                                CookiePreferencesUtil.setCookie(mContext, header.getValue());                                if (AppConfig.DEBUG) {                                    Log.d("Contains Set-Cookie", "cookie:" + header.getValue());                                }                            }                        }                    }                } catch (ClientProtocolException e) {                    //e.printStackTrace();                } catch (IOException e) {                    //e.printStackTrace();                }                return result;            }            @Override            protected void onPostExecute(String result) {                if (mCallback == null) return;                if (result != null) {                    try {                        mCallback.onSuccessNetworkTask(task.id, new JSONObject(result));                    } catch (JSONException e) {                        mCallback.onFailedNetworkTask(task.id, result);                    }                } else {                    mCallback.onFailedNetworkTask(task.id, result);                }            }        }.execute();    }}